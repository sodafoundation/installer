# Copyright 2018 The OpenSDS Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: check ceph exists
  shell: "{{ item }}"
  with_items: 
    - bash ./script/check_ceph_exist.sh
  ignore_errors: true
  register: cephres

- name: check if ceph.conf folder exist when ceph backend enable
  shell: ls /etc/ceph
  ignore_errors: true
  register: result

- name: create ceph.conf folder if not exist when ceph backend enable
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ ceph_backend_conf }}"
  when: cephres["results"][0]["stdout"] == "HEALTH_OK" and result["rc"] != 0

- name:  configure ceph section when ceph backend exist
  shell: |
   cat > ceph_exist.conf
   cat >> ceph_exist.conf <<EOF    
    [global]
    rbd default features = {{ default_feature }}
    
    fsid= {{ fsid }}
    mon initial members= {{ mon_members }}
    mon host= {{ mon_host }}
    public network = {{ public_network }}
    cluster network = {{ cluster_network }}
    [osd]
    osd mkfs type = {{ mkfs_type }}
    osd mkfs options xfs = {{ mkfs_options }}
    osd mount options xfs = {{ mount_options }}
    osd journal size = {{ journal_size }}
       
  args:
    chdir: "{{ ceph_backend_conf }}"
  ignore_errors: yes
  when: cephres["results"][0]["stdout"] == "HEALTH_OK" and cephres["results"][0]["rc"] == 0

- name: copy ceph config to /etc/ceph
  copy:
    backup: yes
    src: "{{ ceph_backend_conf }}/ceph_exist.conf"
    dest: "{{ ceph_backend_conf }}/ceph.conf"
    force: yes
  when: cephres["results"][0]["stdout"] == "HEALTH_OK" and result["rc"] == 0

- name: check ceph version
  script: ./script/check_ceph_version.sh 
  become: yes
  ignore_errors: true
  register: res

- name: install ceph-common external package when ceph backend enabled
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - ceph-common
  when: cephres["results"][0]["stdout"] != "HEALTH_OK" and res["rc"] == 1

- name: install notario package with pip when ceph backend enabled
  pip:
    name: "{{ item }}"
  with_items:
    - notario
  when: cephres["results"][0]["stdout"] != "HEALTH_OK"

- name: configure ceph section in opensds global info if specify ceph backend
  shell: |
    cat >> opensds.conf <<OPENSDS_GLOABL_CONFIG_DOC

    [ceph]
    name = {{ ceph_name }}
    description = {{ ceph_description }}
    driver_name = {{ ceph_driver_name }}
    config_path = {{ ceph_config_path }}
  args:
    chdir: "{{ opensds_config_dir }}"
  ignore_errors: yes

- name: copy opensds ceph backend file to ceph config file if specify ceph backend
  copy:
    src: ../../../group_vars/ceph/ceph.yaml
    dest: "{{ ceph_config_path }}"

- name: check if ceph osd is running
  shell: ps aux | grep ceph-osd | grep -v grep
  ignore_errors: true
  changed_when: false
  register: service_ceph_osd_status
  when: res["rc"] == 0

- name: check if ceph mon is running
  shell: ps aux | grep ceph-mon | grep -v grep
  ignore_errors: true
  changed_when: false
  register: service_ceph_mon_status
  when: res["rc"] == 0

- name: check for ceph-ansible source code existed
  stat:
    path: /opt/ceph-ansible
  ignore_errors: yes
  register: cephansibleexisted
  when: cephres["results"][0]["stdout"] != "HEALTH_OK"

- name: download ceph-ansible source code
  git:
    repo: https://github.com/ceph/ceph-ansible.git
    dest: /opt/ceph-ansible
    version: "{{ ceph_ansible_branch }}"
  when:
    - cephres["results"][0]["stdout"] != "HEALTH_OK"
    - cephansibleexisted.stat.exists is undefined or cephansibleexisted.stat.exists == false
    - res["rc"] == 1 or service_ceph_mon_status.rc == 1 or service_ceph_osd_status.rc == 1

- name: copy ceph inventory host into ceph-ansible directory
  copy:
    src: ../../../group_vars/ceph/ceph.hosts
    dest: /opt/ceph-ansible/ceph.hosts
  when: cephres["results"][0]["stdout"] != "HEALTH_OK" and res["rc"] == 1

- name: copy ceph all.yml file into ceph-ansible group_vars directory
  copy:
    src: ../../../group_vars/ceph/all.yml
    dest: /opt/ceph-ansible/group_vars/all.yml
  when: cephres["results"][0]["stdout"] != "HEALTH_OK" and res["rc"] == 1


- name: copy site.yml in ceph-ansible
  copy:
    src: /opt/ceph-ansible/site.yml.sample
    dest: /opt/ceph-ansible/site.yml
    remote_src: yes
  when: cephres["results"][0]["stdout"] != "HEALTH_OK" and res["rc"] == 1


- name: ping all hosts and run ceph-ansible playbook
  shell: "{{ item }}"
  become: true
  with_items:
    - ansible all -m ping -i ceph.hosts
    - ansible-playbook site.yml -i ceph.hosts | tee /var/log/ceph_ansible.log
  args:
    chdir: /opt/ceph-ansible
  when:
    - cephres["results"][0]["stdout"] != "HEALTH_OK"
    - res["rc"] == 1 or service_ceph_mon_status.rc == 1 or service_ceph_osd_status.rc == 1

- name: wait until ceph stabilizes
  include_tasks: roles/osdsdock/scenarios/ceph_stabilize.yml

- name: configure profile and disable some features in ceph for kernel compatible.
  shell: "{{ item }}"
  become: true
  ignore_errors: yes
  with_items:
    - ceph osd crush tunables hammer
    - sleep 5 
    - grep -q "^rbd default features" /etc/ceph/ceph.conf || sed -i '/\[global\]/arbd default features = 1' /etc/ceph/ceph.conf

- name: create specified pools and initialize them with default pool size.
  shell: ceph osd pool create {{ item }} 100 && ceph osd pool set {{ item }} size 1
  ignore_errors: yes
  changed_when: false
  with_items: "{{ ceph_pools }}"

- name: wait until defined ceph pooll are visible
  include_tasks: roles/osdsdock/scenarios/ceph_pool_check.yml
