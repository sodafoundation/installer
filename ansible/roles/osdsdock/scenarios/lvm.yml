# Copyright 2018 The OpenSDS Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: install lvm2 ang tgt external package and ibv* commands package when lvm backend enabled
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - lvm2
    - tgt
    - thin-provisioning-tools
    - ibverbs-utils

- name: configure opensds global info osdsdock lvm
  ini_file:
    path: "{{ opensds_conf_file }}"
    section: lvm
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
        - { option: name, value: "{{ lvm_name }}" }
        - { option: description, value: "{{ lvm_description }}" }
        - { option: driver_name, value: "{{ lvm_driver_name }}" }
        - { option: config_path, value: "{{ lvm_config_path }}" }
  become: yes

- name: copy opensds lvm backend file to lvm config path if specify lvm backend
  copy:
    src: ../../../group_vars/lvm/lvm.yaml
    dest: "{{ lvm_config_path }}"

- name: update opensds lvm backend file if specify lvm backend
  replace:
    path: "{{ lvm_config_path }}"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  with_items:
    - { regexp: '127.0.0.1', replace: '{{ host_ip }}'}
    - { regexp: 'opensds-volumes', replace: '{{ opensds_volume_group }}'}

- name: create directory to volume group file
  file:
    path: "/opt/opensds-telemetry-linux-amd64/volumegroups"
    state: directory
    recurse: yes

- name: create volume group and load dm_thin_pool module into linux kernel
  shell:
    _raw_params: |
      function _create_lvm_volume_group {
          local vg=$1
          local size=$2

          local backing_file=/opt/opensds-telemetry-linux-amd64/volumegroups/${vg}.img
          if ! sudo vgs $vg; then
              # Only create if the file doesn't already exists
              [[ -f $backing_file ]] || truncate -s $size $backing_file
              local vg_dev
              vg_dev=`sudo losetup -f --show $backing_file`

              # Only create physical volume if it doesn't already exist
              if ! sudo pvs $vg_dev; then
                  sudo pvcreate $vg_dev
              fi

              # Only create volume group if it doesn't already exist
              if ! sudo vgs $vg; then
                  sudo vgcreate $vg $vg_dev
              fi
          fi

          # Only create if the file doesn't already exists
          # create volume group and prepare kernel module
          if [[ -e `find /lib/modules/$(uname -r) -type f -name 'nvme-rdma.ko'` ]]; then
              if [[ -e {{ lvm_nvme_device }} ]]; then
                  local vg={{ opensds_volume_group_nvme }}
                  local size={{ opensds_volume_group_nvme_size }}
                  sudo mkdir -p /opt/opensds-telemetry-linux-amd64/volumegroups/{{ opensds_volume_group_nvme }}
                  sudo mount {{ lvm_nvme_device }} /opt/opensds-telemetry-linux-amd64/volumegroups/{{ opensds_volume_group_nvme }}
                  local backing_file=/opt/opensds-telemetry-linux-amd64/volumegroups/{{ opensds_volume_group_nvme }}/${vg}.img
                  if ! sudo vgs $vg; then
                      # Only create if the file doesn't already exists
                      [[ -f $backing_file ]] || truncate -s $size $backing_file
                      local vg_dev
                      vg_dev=`sudo losetup -f --show $backing_file`

                      # Only create physical volume if it doesn't already exist
                      if ! sudo pvs $vg_dev; then
                          sudo pvcreate $vg_dev
                      fi

                      # Only create volume group if it doesn't already exist
                      if ! sudo vgs $vg; then
                          sudo vgcreate $vg $vg_dev
                      fi
                  fi
                    sudo modprobe nvmet
                    sudo modprobe nvmet-rdma
              fi
              # nvme-cli utility for nvmeof initiator
              sudo wget https://github.com/linux-nvme/nvme-cli/archive/v1.7.tar.gz -O /opt/nvmecli-1.7.tar.gz
              sudo tar -zxvf /opt/nvmecli-1.7.tar.gz -C /opt/
              cd /opt/nvme-cli-1.7 && sudo make && sudo make install
              sudo modprobe nvme
              sudo modprobe nvme-rdma
          fi
      }
      # we need this kernel module to support creating thin pool logical volumes (lv) later.
      modprobe dm_thin_pool
      _create_lvm_volume_group {{ opensds_volume_group }} 10G
  args:
    executable: /bin/bash
  become: true

- name: check RDMA card for nvmeof
  shell:
    _raw_params: |
      phys_port_cnt=$(ibv_devinfo |grep -Eow hca_id |wc -l)
      echo "The actual quantity of RDMA ports is $phys_port_cnt"

      if [[ "$phys_port_cnt" < '1' ]]; then
        echo "RDMA card not found"
      fi
  args:
    executable: /bin/bash
  become: true
