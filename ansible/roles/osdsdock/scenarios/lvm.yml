# Copyright (c) 2018 Huawei Technologies Co., Ltd. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: install lvm2 ang tgt external package and ibv* commands package when lvm backend enabled
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - lvm2
    - tgt
    - thin-provisioning-tools
    - ibverbs-utils

- name: configure lvm section in opensds global info if specify lvm backend
  shell: |
    cat >> opensds.conf <<OPENSDS_GLOABL_CONFIG_DOC

    [lvm]
    name = {{ lvm_name }}
    description = {{ lvm_description }}
    driver_name = {{ lvm_driver_name }}
    config_path = {{ lvm_config_path }}
  args:
    chdir: "{{ opensds_config_dir }}"
  ignore_errors: yes

- name: copy opensds lvm backend file to lvm config path if specify lvm backend
  copy:
    src: ../../../group_vars/lvm/lvm.yaml
    dest: "{{ lvm_config_path }}"

- name: create directory to volume group file
  file:
    path: "{{ hotpot_work_dir }}/volumegroups"
    state: directory
    recurse: yes

- name: create volume group and load dm_thin_pool module into linux kernel
  shell:
    _raw_params: |
      function _create_lvm_volume_group {
          local vg=$1
          local size=$2

          local backing_file={{ hotpot_work_dir }}/volumegroups/${vg}.img
          if ! sudo vgs $vg; then
              # Only create if the file doesn't already exists
              [[ -f $backing_file ]] || truncate -s $size $backing_file
              local vg_dev
              vg_dev=`sudo losetup -f --show $backing_file`

              # Only create physical volume if it doesn't already exist
              if ! sudo pvs $vg_dev; then
                  sudo pvcreate $vg_dev
              fi

              # Only create volume group if it doesn't already exist
              if ! sudo vgs $vg; then
                  sudo vgcreate $vg $vg_dev
              fi
          fi

          # Only create if the file doesn't already exists
          # create volume group and prepare kernel module
          if [ -e {{ lvm_nvme_device }} ]; then
            local vg={{ opensds_volume_group_nvme }}
            local size={{ opensds_volume_group_nvme_size }}
            sudo mkdir -p {{ hotpot_work_dir }}/volumegroups/{{ opensds_volume_group_nvme }}
            sudo mount {{ lvm_nvme_device }} {{ hotpot_work_dir }}/volumegroups/{{ opensds_volume_group_nvme }}
            local backing_file={{ hotpot_work_dir }}/volumegroups/{{ opensds_volume_group_nvme }}/${vg}.img
            if ! sudo vgs $vg; then
                # Only create if the file doesn't already exists
                [[ -f $backing_file ]] || truncate -s $size $backing_file
                local vg_dev
                vg_dev=`sudo losetup -f --show $backing_file`

                # Only create physical volume if it doesn't already exist
                if ! sudo pvs $vg_dev; then
                    sudo pvcreate $vg_dev
                fi

                # Only create volume group if it doesn't already exist
                if ! sudo vgs $vg; then
                    sudo vgcreate $vg $vg_dev
                fi
            fi
              sudo modprobe nvmet
              sudo modprobe nvmet-rdma
          fi
          # nvme-cli utility for nvmeof initiator
          sudo wget https://github.com/linux-nvme/nvme-cli/archive/v1.7.tar.gz -O /opt/nvmecli-1.7.tar.gz
          sudo tar -zxvf /opt/nvmecli-1.7.tar.gz -C /opt/
          cd /opt/nvme-cli-1.7 && sudo make && sudo make install
          sudo modprobe nvme
          sudo modprobe nvme-rdma
      }
      # we need this kernel module to support creating thin pool logical volumes (lv) later.
      modprobe dm_thin_pool
      _create_lvm_volume_group {{ opensds_volume_group }} 10G
  args:
    executable: /bin/bash
  become: true

- name: check RDMA card for nvmeof
  shell:
    _raw_params: |
      phys_port_cnt=$(ibv_devinfo |grep -Eow hca_id |wc -l)
      echo "The actual quantity of RDMA ports is $phys_port_cnt"

      if [[ "$phys_port_cnt" < '1' ]]; then
        echo "RDMA card not found"
      fi
  args:
    executable: /bin/bash
  become: true
