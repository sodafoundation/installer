# Copyright 2019 The OpenSDS Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# ----Stop all services to all ansible re-run in case of failure-----
- name: stop all services
  shell: "{{ item }}"
  with_items:
    - systemctl stop prometheus node_exporter alertmanager pushgateway sysstat lvm_exporter
  become: yes
  ignore_errors: yes

- name: add users (prometheus, node_exporter, pushgateway & alertmanager)
  user:
    name: "{{ item }}"
    shell: /bin/false
    createhome: no
  with_items:
      - prometheus
      - node_exporter
      - pushgateway
      - alertmanager
      - grafana
  become: yes

- name: create telemetry directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: '0755'
    state: directory
  with_items:
      - { path: '/etc/prometheus', owner: 'prometheus', group: 'prometheus' }
      - { path: '/var/lib/prometheus', owner: 'prometheus', group: 'prometheus' }
      - { path: '/etc/alertmanager', owner: 'alertmanager', group: 'alertmanager' }
      - { path: '/var/lib/alertmanager', owner: 'alertmanager', group: 'alertmanager' }
      - { path: '/etc/grafana', owner: 'grafana', group: 'grafana' }
      - { path: '/var/lib/grafana', owner: 'grafana', group: 'grafana' }
  become: yes

# ---------start to install prometheus---------
- name: check for telemetry packages existed
  stat:
    path: "{{ telemetry_work_dir }}"
  register: telemetryfilesexisted

- name: create telemetry work directory if it doesn't exist
  file:
    path: "{{ telemetry_work_dir }}"
    state: directory
  when:
    - telemetryfilesexisted.stat.exists is undefined or telemetryfilesexisted.stat.exists == false

- name: download and extract the telemetry, prometheus
  unarchive:
    src: https://github.com/prometheus/prometheus/releases/download/v2.9.2/prometheus-2.9.2.linux-amd64.tar.gz
    dest: "{{ telemetry_work_dir }}/"
    remote_src: yes
  become: yes
  when:
    - telemetryfilesexisted.stat.exists is undefined or telemetryfilesexisted.stat.exists == False

- name: download and extract the telemetry, node_exporter
  unarchive:
    src: https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz
    dest: "{{ telemetry_work_dir }}/"
    remote_src: yes
  become: yes
  when:
    - telemetryfilesexisted.stat.exists is undefined or telemetryfilesexisted.stat.exists == False

- name: download and extract the telemetry, pushgateway
  unarchive:
    src: https://github.com/prometheus/pushgateway/releases/download/v0.8.0/pushgateway-0.8.0.linux-amd64.tar.gz
    dest: "{{ telemetry_work_dir }}/"
    remote_src: yes
  become: yes
  when:
    - telemetryfilesexisted.stat.exists is undefined or telemetryfilesexisted.stat.exists == False

- name: download and extract the telemetry, alertmanager
  unarchive:
    src: https://github.com/prometheus/alertmanager/releases/download/v0.16.2/alertmanager-0.16.2.linux-amd64.tar.gz
    dest: "{{ telemetry_work_dir }}/"
    remote_src: yes
  become: yes
  when:
    - telemetryfilesexisted.stat.exists is undefined or telemetryfilesexisted.stat.exists == False

- name: install prometheus
  shell: "{{ item }}"
  with_items:
    - cp prometheus-2.9.2.linux-amd64/prometheus /usr/local/bin/prometheus
    - cp prometheus-2.9.2.linux-amd64/promtool /usr/local/bin/promtool
    - chown -R prometheus:prometheus /usr/local/bin/prometheus
    - chown -R prometheus:prometheus /usr/local/bin/promtool
    - cp -r prometheus-2.9.2.linux-amd64/consoles /etc/prometheus
    - cp -r prometheus-2.9.2.linux-amd64/console_libraries /etc/prometheus
    - chown -R prometheus:prometheus /etc/prometheus/consoles
    - chown -R prometheus:prometheus /etc/prometheus/console_libraries
  become: yes
  args:
    chdir: "{{ telemetry_work_dir }}"

- name: configuring prometheus
  shell: "{{ item }}"
  with_items:
    - bash ./script/set_prometheus_config.sh
    - chown prometheus:prometheus /etc/prometheus/prometheus.yml
  become: yes

- name: running prometheus
  shell: "{{ item }}"
  with_items:
    - bash ./script/set_prometheus_service.sh
    - systemctl daemon-reload
    - systemctl start prometheus
  become: yes

- name: check status of prometheus service
  shell: "{{ item }}"
  with_items:
    - systemctl status prometheus
  become: yes

# ---------start to install node_exporter---------
- name: install node_exporter
  shell: "{{ item }}"
  with_items:
    - cp node_exporter-0.17.0.linux-amd64/node_exporter /usr/local/bin/
    - chown node_exporter:node_exporter /usr/local/bin/node_exporter
  become: yes
  args:
    chdir: "{{ telemetry_work_dir }}"

- name: edit node_exporter.service
  shell: "{{ item }}"
  with_items:
    - bash ./script/set_node_exporter_service.sh
  become: yes

- name: start node_exporter
  shell: "{{ item }}"
  with_items:
    - systemctl daemon-reload
    - systemctl start node_exporter
  become: yes

- name: check status of node_exporter service
  shell: "{{ item }}"
  with_items:
    - systemctl status node_exporter
  become: yes

- name: configuring prometheus to scrape node_exporter
  shell: "{{ item }}"
  with_items:
    - bash ./script/mod_prometheus_config_for_node_exporter.sh
  become: yes

- name: restart prometheus
  shell: "{{ item }}"
  with_items:
    - systemctl restart prometheus
  become: yes

- name: check status of prometheus service
  shell: "{{ item }}"
  with_items:
    - systemctl status prometheus
  become: yes

# ---------start to install pushgateway---------
- name: install pushgateway
  shell: "{{ item }}"
  with_items:
    - cp pushgateway-0.8.0.linux-amd64/pushgateway /usr/local/bin/
    - chown pushgateway:pushgateway /usr/local/bin/pushgateway
  become: yes
  args:
    chdir: "{{ telemetry_work_dir }}"

- name: edit pushgateway.service
  shell: "{{ item }}"
  with_items:
    - bash ./script/set_pushgateway_service.sh
  become: yes

- name: start pushgateway
  shell: "{{ item }}"
  with_items:
    - systemctl daemon-reload
    - systemctl start pushgateway
  become: yes

- name: check status of pushgateway service
  shell: "{{ item }}"
  with_items:
    - systemctl status pushgateway
  become: yes

- name: configure, restart and check status of prometheus for pushgateway service
  shell: "{{ item }}"
  with_items:
    - bash ./script/mod_prometheus_config_for_pushgateway.sh
    - systemctl restart prometheus
    - systemctl status prometheus
  become: yes
# ---------start to install sysstat---------
- name: install "sysstat" package
  apt:
    name: sysstat
  become: yes

- name: start sysstat  service and check
  shell: "{{ item }}"
  with_items:
    - sed -i 's/^ENABLED=.*/ENABLED="true"/g' /etc/default/sysstat
    - systemctl restart sysstat
    - systemctl status sysstat
  become: yes

# ---------start  lvm_exporter---------
- name: copy lvm_exporter
  shell: "{{ item }}"
  tags:
    - lvm_exporter
  with_items:
    - cp {{ hotpot_work_dir }}/bin/lvm_exporter /usr/local/bin/
    - chown root:root /usr/local/bin/lvm_exporter
  become: yes

- name: edit lvm_exporter.service
  shell: "{{ item }}"
  tags:
    - lvm_exporter
  with_items:
    - bash ./script/set_lvm_exporter_service.sh {{ lvm_exporter_port }}
  become: yes

- name: start lvm_exporter
  shell: "{{ item }}"
  tags:
    - lvm_exporter
  with_items:
    - systemctl daemon-reload
    - systemctl start lvm_exporter
  become: yes

- name: check status of lvm_exporter service
  shell: "{{ item }}"
  tags:
    - lvm_exporter
  with_items:
    - systemctl status lvm_exporter
  become: yes

- name: configuring prometheus to scrape lvm_exporter
  tags:
    - lvm_exporter
  shell: "{{ item }}"
  with_items:
    - bash ./script/mod_prometheus_config_for_lvm_exporter.sh {{ lvm_exporter_port }}
  become: yes

- name: restart prometheus
  tags:
    - lvm_exporter
  shell: "{{ item }}"
  with_items:
    - systemctl restart prometheus
  become: yes

- name: check status of prometheus service
  tags:
    - lvm_exporter
  shell: "{{ item }}"
  with_items:
    - systemctl status prometheus
  become: yes
# ---------start to install alertmanager---------
- name: install alertmanager
  shell: "{{ item }}"
  with_items:
    - cp alertmanager-0.16.2.linux-amd64/alertmanager /usr/local/bin/
    - cp alertmanager-0.16.2.linux-amd64/alertmanager.yml /etc/alertmanager
    - chown alertmanager:alertmanager /usr/local/bin/alertmanager
    - chown alertmanager:alertmanager /etc/alertmanager/alertmanager.yml
  become: yes
  args:
    chdir: "{{ telemetry_work_dir }}"

- name: edit alertmanager.service
  shell: "{{ item }}"
  with_items:
    - bash ./script/set_alertmanager_service.sh
  become: yes

- name: start alertmanager
  shell: "{{ item }}"
  with_items:
    - systemctl daemon-reload
    - systemctl start alertmanager
    - systemctl enable alertmanager
  become: yes

- name: configuring prometheus to scrape alertmanager
  shell: "{{ item }}"
  with_items:
    - bash ./script/mod_prometheus_config_for_alertmanager.sh
  become: yes

- name: restart prometheus
  shell: "{{ item }}"
  with_items:
    - systemctl restart prometheus
  become: yes

- name: check status of prometheus service
  shell: "{{ item }}"
  with_items:
    - systemctl status prometheus
  become: yes

# ---------start to install grafana---------
- name: copy configuration for grafana
  shell: "{{ item }}"
  with_items:
    - "cp -f ./telemetry/grafana/grafana.ini {{ grafana_conf_home }}"
    - "cp -rf ./../contrib/grafana/dashboards {{ grafana_data_home }}"
    - "cp -rf ./telemetry/grafana/provisioning {{ grafana_data_home }}"

- name: Setting prometheus url in grafana datasource
  lineinfile:
    dest: "{{ grafana_data_home }}/provisioning/datasources/prom_osds.yml"
    regexp: '^(.*)  url: (.*)$'
    line: "  url: {{ prometheus_url }}"
    backrefs: yes

- name: install grafana repository key
  apt_key:
    url: "{{ grafana_gpg_key }}"
    state: present
  become: yes

- name: add grafana repository
  apt_repository:
    repo: "{{ grafana_repositroy }}"
    state: present
  become: yes

- name: install "grafana" package
  apt:
    name: grafana
  become: yes

- name: start grafana
  shell: "{{ item }}"
  with_items:
    - systemctl start grafana-server
    - systemctl status grafana-server
  become: yes