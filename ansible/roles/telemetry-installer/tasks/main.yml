# Copyright 2019 The OpenSDS Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: generate certificates
  shell: "{{ item }}"
  with_items:
    - bash ./script/create_cert.sh "{{ opensds_certs_dir }}"
  become: yes

- name: hotpot keystone configuration when keystone is installed by script
  shell: "{{ item }}"
  with_items:
    - bash ./script/keystone.sh config hotpot script
  when: opensds_auth_strategy == "keystone" and install_keystone_with_docker != true
  become: yes

- name: configure openapi specification
  copy:
    src: "{{ hotpot_work_dir }}/swagger.yaml"
    dest: "{{ opensds_config_dir }}"
  become: yes
  ignore_errors: true

# ---------update opensds config file with opensds global info---------
- name: configure opensds global info osdslet
  ini_file:
    path: "{{ opensds_conf_file }}"
    section: osdslet
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: api_endpoint, value: "{{ controller_endpoint }}" }
    - { option: log_file, value: "{{ controller_log_file }}" }
  become: yes

- name: configure opensds global info osdsapiserver
  ini_file:
    create: no
    path: "{{ opensds_conf_file }}"
    section: osdsapiserver
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: api_endpoint, value: "{{ apiserver_endpoint }}" }
    - { option: log_file, value: "{{ apiserver_log_file }}" }
    - { option: auth_strategy, value: "{{ opensds_auth_strategy }}" }
    - { option: https_enabled, value: False }
    - { option: beego_https_cert_file, value: "" }
    - { option: beego_https_key_file, value: "" }
  become: yes

- name: configure opensds global info database
  ini_file:
    create: no
    path: "{{ opensds_conf_file }}"
    section: database
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: endpoint, value: "{{ db_endpoint }}" }
    - { option: driver, value: "{{ db_driver }}" }
  become: yes

# ---------update opensds config file with telemtetry configs---------
- name: Set opensds.conf with telemetry options in osdsapiserver
  ini_file:
    create: no
    path: "{{ opensds_conf_file }}"
    section: osdsapiserver
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: prometheus_conf_home, value: "{{ prometheus_conf_home }}" }
    - { option: prometheus_url, value: "{{ prometheus_url }}" }
    - { option: prometheus_conf_file, value: "{{ prometheus_conf_file }}" }
    - { option: alertmgr_conf_home, value: "{{ alertmgr_conf_home }}" }
    - { option: alertmgr_url, value: "{{ alertmgr_url }}" }
    - { option: alertmgr_conf_file, value: "{{ alertmgr_conf_file }}" }
    - { option: grafana_conf_home, value: "{{ grafana_conf_home }}" }
    - { option: grafana_restart_cmd, value: "{{ grafana_restart_cmd }}" }
    - { option: grafana_conf_file, value: "{{ grafana_conf_file }}" }
    - { option: grafana_url, value: "{{ grafana_url }}" }
    - { option: conf_reload_url, value: "{{ conf_reload_url }}" }
  become: yes
  tags: telemetry_conf
  when:
    - deploy_project == "telemetry"
- name: Set opensds.conf with telemetry options in osdslet
  ini_file:
    create: no
    path: "{{ opensds_conf_file }}"
    section: osdslet
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: prometheus_push_mechanism, value: "{{ prometheus_push_mechanism }}" }
    - { option: kafka_endpoint, value: "{{ kafka_endpoint }}" }
    - { option: kafka_topic, value: "{{ kafka_topic }}" }
    - { option: alertmgr_url, value: "{{ alertmgr_url }}" }
    - { option: grafana_url, value: "{{ grafana_url }}" }
  become: yes
  tags: telemetry_conf
  when:
    - deploy_project == "telemetry"

- name: Set push mechanism when NodeExporter is selected
  ini_file:
    create: no
    path: "{{ opensds_conf_file }}"
    section: osdslet
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: node_exporter_watch_folder, value: "{{ node_exporter_watch_folder }}" }
  become: yes
  when: prometheus_push_mechanism == 'NodeExporter' and deploy_project == "telemetry"
  tags: telemetry_conf

- name: Set push mechanism when PushGateway is selected
  ini_file:
    create: no
    path: "{{ opensds_conf_file }}"
    section: osdslet
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: prometheus_push_gateway_url, value: "{{ prometheus_push_gateway_url }}" }
  become: yes
  when: prometheus_push_mechanism == 'PushGateway' and deploy_project == "telemetry"
  tags: telemetry_conf


- name: include scenarios/container.yml when installing from container
  include: scenarios/container.yml
  when: install_from == "container"

- name: include scenarios/source-code.yml when not installing from container
  include: scenarios/source-code.yml
  when: install_from != "container"

- name: include scenarios/install_telemetry_tools.yml
  tags:
    - telemetry
  include: scenarios/install_telemetry_tools.yml
